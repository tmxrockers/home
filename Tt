/**
 * This method saves ReportsByRoleConfigMaster data.
 *
 * @param reportsByRoleConfigMasterRequest The request containing ReportsByRoleConfigMaster data.
 * @throws GRMServiceException If there is an error in the GRM service.
 */
private void doSaveReportsByRoleConfigMaster(ReportsByRoleConfigMasterRequest reportsByRoleConfigMasterRequest) throws GRMServiceException {
    // Initialize sets to store distinct IDs
    Set<Long> distinctReportByRolesMasterConfigIds = new HashSet<>();
    Set<Integer> distinctRoleIds = new HashSet<>();

    // Validate the request and populate distinct IDs sets
    validateReportsByRoleRequestEntity(reportsByRoleConfigMasterRequest, distinctReportByRolesMasterConfigIds, distinctRoleIds);

    // Retrieve ReportsByRoleMasterConfigs and TsysRoles
    Optional<Set<TdReportBundleRoleConfigMaster>> reportsByRoleMasterConfigs =
            reportBundleRoleConfigMasterRepository.findA118yConfigIdInOrderByConfigId(distinctReportByRolesMasterConfigIds);

    Optional<Set<TsysRoles>> tsysRoles = tsysRolesRepository.findAllByRoleld(distinctRoleIds);

    // Create maps for efficient data lookup
    Map<Long, TdReportBundleRoleConfigMaster> reportsByRoleConfigMasterDBMap = new HashMap<>();
    Map<Integer, TsysRoles> tsysRolesDBMap = new HashMap<>();

    if (reportsByRoleMasterConfigs.isPresent()) {
        reportsByRoleConfigMasterDBMap = reportsByRoleMasterConfigs.get().stream()
                .collect(Collectors.toMap(TdReportBundleRoleConfigMaster::getConfigId, Function.identity()));
    }

    if (tsysRoles.isPresent()) {
        tsysRolesDBMap = tsysRoles.get().stream()
                .collect(Collectors.toMap(TsysRoles::getRoleld, Function.identity()));
    }

    // Prepare the data and save/update
    Set<TdReportBundleRoleConfigMaster> reportBundleRoleConfigMasterEntityList =
            doPrepareReportByRoleConfigMasterData(reportsByRoleConfigMasterRequest, reportsByRoleConfigMasterDBMap, tsysRolesDBMap);

    reportBundleRoleConfigMasterRepository.saveAll(reportBundleRoleConfigMasterEntityList);
}

/**
 * This method validates the ReportsByRoleConfigMasterRequest entity.
 *
 * @param reportsByRoleConfigMasterRequest     The request containing ReportsByRoleConfigMaster data.
 * @param distinctReportByRolesMasterConfigIds  A set to store distinct ReportByRolesMasterConfig IDs.
 * @param distinctRoleIds                      A set to store distinct Role IDs.
 * @throws GRMServiceException                 If there is an error in the GRM service.
 */
private void validateReportsByRoleRequestEntity(ReportsByRoleConfigMasterRequest reportsByRoleConfigMasterRequest,
                                                Set<Long> distinctReportByRolesMasterConfigIds, Set<Integer> distinctRoleIds) throws GRMServiceException {
    for (ReportsByRoleConfigMasterDetails reportsByRoleConfigMasterData : reportsByRoleConfigMasterRequest.getReportsByRoleConfigMasterDetails()) {
        if (Objects.isNull(reportsByRoleConfigMasterData.getRoleEntity())) {
            throw new GRMServiceException("There is no valid ROLE ID available to configure");
        } else {
            distinctRoleIds.add(reportsByRoleConfigMasterData.getRoleEntity().getId());
        }

        if (Objects.isNull(reportsByRoleConfigMasterData.getConfigMasterId())) {
            throw new GRMServiceException("There is no valid MASTER_CONFIG_ID available to configure");
        } else {
            distinctReportByRolesMasterConfigIds.add(reportsByRoleConfigMasterData.getConfigMasterId());
        }
    }
}

// Other methods...

/**
 * Prepares and returns a set of TdReportBundleRoleConfigMaster entities based on the request data.
 *
 * @param reportsByRoleConfigMasterRequest    The request containing ReportsByRoleConfigMaster data.
 * @param reportsByRoleConfigMasterDBMap      A map for efficient lookup of existing data.
 * @param tsysRolesDBMap                      A map for efficient lookup of TsysRoles.
 * @return                                    A set of TdReportBundleRoleConfigMaster entities.
 */
private Set<TdReportBundleRoleConfigMaster> doPrepareReportByRoleConfigMasterData(
        ReportsByRoleConfigMasterRequest reportsByRoleConfigMasterRequest,
        Map<Long, TdReportBundleRoleConfigMaster> reportsByRoleConfigMasterDBMap,
        Map<Integer, TsysRoles> tsysRolesDBMap) {
    Date date = new Date(System.currentTimeMillis());
    String loggedUser = CommonUtil.getLoggedInUserId(context);
    Set<TdReportBundleRoleConfigMaster> reportBundleRoleConfigMasterEntityList = new HashSet<>();

    reportsByRoleConfigMasterRequest.getReportsByRoleConfigMasterDetails().forEach(reportsByRoleConfigMasterRequestEntity -> {
        TdReportBundleRoleConfigMaster tdReportBundleRoleConfigMasterEntity =
                reportsByRoleConfigMasterDBMap.get(reportsByRoleConfigMasterRequestEntity.getConfigMasterId());

        if (Objects.isNull(tdReportBundleRoleConfigMasterEntity)) {
            // Save
            tdReportBundleRoleConfigMasterEntity = new TdReportBundleRoleConfigMaster();
            tdReportBundleRoleConfigMasterEntity.setConfigId(Long.valueOf("1"));
            tdReportBundleRoleConfigMasterEntity.setTsysRoles(tsysRolesDBMap.get(reportsByRoleConfigMasterRequestEntity.getRoleEntity().getId()));
            tdReportBundleRoleConfigMasterEntity.setCreatedDate(date);
            tdReportBundleRoleConfigMasterEntity.setCreatedBy(loggedUser);
            tdReportBundleRoleConfigMasterEntity.setRecordStatus("A");
        } else {
            // Update
            tdReportBundleRoleConfigMasterEntity.setUpdatedBy(loggedUser);
            tdReportBundleRoleConfigMasterEntity.setUpdatedDate(date);

            if (Objects.equals(reportsByRoleConfigMasterRequestEntity.getAction(), ServiceConstants.ADD_ACTION) ||
                    Objects.equals(reportsByRoleConfigMasterRequestEntity.getAction(), ServiceConstants.UPDATE_ACTION)) {
                tdReportBundleRoleConfigMasterEntity.setRecordStatus("A");
            } else {
                tdReportBundleRoleConfigMasterEntity.setRecordStatus("D");
                tdReportBundleRoleConfigMasterEntity.setIsActive("Y".equals(reportsByRoleConfigMasterRequestEntity.getIsActive()) ? "1" : "8");
                addReportsToRoleConfigMaster(reportsByRoleConfigMasterRequestEntity, tdReportBundleRoleConfigMasterEntity);
                addBundlesToRoleConfigMaster(reportsByRoleConfigMasterRequestEntity, tdReportBundleRoleConfigMasterEntity);
                reportBundleRoleConfigMasterEntityList.add(tdReportBundleRoleConfigMasterEntity);
            }
        }
    });

    return reportBundleRoleConfigMasterEntityList;
}

/**
 * Adds bundles to the RoleConfigMaster entity.
 *
 * @param reportsByRoleConfigMasterRequestEntity   The request entity.
 * @param reportBundleRoleConfigMasterEntity       The RoleConfigMaster entity.
 */
private void addBundlesToRoleConfigMaster(ReportsByRoleConfigMasterDetails reportsByRoleConfigMasterRequestEntity,
                                          TdReportBundleRoleConfigMaster reportBundleRoleConfigMasterEntity) {
    if (CollectionUtils.isNotEmpty(reportsByRoleConfigMasterRequestEntity.getReportBundlesAccess())) {
        reportsByRoleConfigMasterRequestEntity.getReportBundlesAccess().forEach(bundle -> {
            T1ReportBundleMaster bundleEntity = new T1ReportBundleMaster();
            bundleEntity.setId(Long.valueOf(bundle.getBundleId()));
            reportBundleRoleConfigMasterEntity.addBundleToRoleBundleAccess(bundleEntity);
        });
    }
}

/**
 * Adds reports to the RoleConfigMaster entity.
 *
 * @param reportsByRoleConfigMasterRequestEntity   The request entity.
 * @param reportBundleRoleConfigMasterEntity       The RoleConfigMaster entity.
 */
private void addReportsToRoleConfigMaster(ReportsByRoleConfigMasterDetails reportsByRoleConfigMasterRequestEntity,
                                          TdReportBundleRoleConfigMaster reportBundleRoleConfigMasterEntity) {
    if (CollectionUtils.isNotEmpty(reportsByRoleConfigMasterRequestEntity.getReportsAccess())) {
        reportsByRoleConfigMasterRequestEntity.getReportsAccess().forEach(report -> {
            T1ReportMaster reportEntity = new T1ReportMaster();
            reportEntity.setId(Long.valueOf(report.getReportId()));
            reportBundleRoleConfigMasterEntity.addReportToRoleReportAccess(reportEntity);
        });
    }
}


/**
 * Saves ReportsByRoleConfigMaster data and returns a response.
 *
 * @param reportsByRoleConfigMasterRequest The request containing ReportsByRoleConfigMaster data.
 * @return ReportsByRoleConfigMasterResponse containing the result of the operation.
 */
@Override
public ReportsByRoleConfigMasterResponse saveReportsByRoleConfigMaster(ReportsByRoleConfigMasterRequest reportsByRoleConfigMasterRequest) {
    ReportsByRoleConfigMasterResponse reportsByRoleConfigMasterResponse = new ReportsByRoleConfigMasterResponse();

    // Check if the list of reports is not empty
    if (CollectionUtils.isNotEmpty(reportsByRoleConfigMasterRequest.getReportsByRoleConfigMasterDetails())) {
        return transactionTemplate.execute((TransactionStatus transactionStatus) -> {
            try {
                doSaveReportsByRoleConfigMaster(reportsByRoleConfigMasterRequest);

                // Set success status
                Status status = ServicesUtil.getSuccessStatus(ServiceConstants.REPORTS_BY_ROLE_MASTER_CONFIG_SAVE_SUCCESS_MSG);
                reportsByRoleConfigMasterResponse.setStatus(status);

                return reportsByRoleConfigMasterResponse;
            } catch (Exception exception) {
                // Log the exception and set error status
                AppLogger.LogError(classname + ": Exception occurred in saveReportsByRoleConfigMaster service:", exception);
                Status status = ServicesUtil.getExceptionStatus(exception.getMessage());
                reportsByRoleConfigMasterResponse.setStatus(status);

                // Rollback the transaction
                transactionStatus.setRollbackOnly();

                return reportsByRoleConfigMasterResponse;
            }
        });
    } else {
        // If the list of reports is empty, set an error status
        Status status = new Status();
        status.setMessage("There is no reports or bundles configuration available to configure role reports master");
        status.setType(ServiceConstants.FAILURE);
        status.setStatusCode(ErrorCode.NO_REPORTS_AVAILABLE.getCode()); // Replace with a constant or enum

        reportsByRoleConfigMasterResponse.setStatus(status);

        return reportsByRoleConfigMasterResponse;
    }
}
