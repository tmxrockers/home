public Map<String, Map<String, List<String>>> getCascadeData() {
        // Step 1: Create a result map
        Map<String, Map<String, List<String>>> result = new HashMap<>();

        // Step 2: For each entity in Cio Level 2, treat it as a key and map to its 3_DOT and 4_DOT entries
        for (OrgEntity entity2Dot : orgData.stream().filter(e -> e.getCioLevel() == 2).collect(Collectors.toList())) {
            String key = entity2Dot.getOrgGroup() + " - " + entity2Dot.getExecutive();

            // 3_DOT: Fetch entries for Cio Level 3 for the same Org Group
            List<String> threeDot = orgData.stream()
                .filter(e -> e.getOrgGroup().equals(entity2Dot.getOrgGroup()) && e.getCioLevel() == 3)
                .map(e -> e.getExecutive() + " - " + e.getPoint())
                .collect(Collectors.toList());

            // 4_DOT: Fetch entries for Cio Level 4 for the same Org Group
            List<String> fourDot = orgData.stream()
                .filter(e -> e.getOrgGroup().equals(entity2Dot.getOrgGroup()) && e.getCioLevel() == 4)
                .map(e -> e.getExecutive() + " - " + e.getPoint())
                .collect(Collectors.toList());

            // Add the 3_DOT and 4_DOT to the result map for this key
            Map<String, List<String>> dotMap = new HashMap<>();
            dotMap.put("3_DOT", threeDot);
            dotMap.put("4_DOT", fourDot);

            result.put(key, dotMap);
        }

        return result;
    }




 public Map<String, Map<String, List<String>>> getCustomData() {
        // Step 1: Create a result map
        Map<String, Map<String, List<String>>> result = new HashMap<>();

        // Step 2: For each entity in Cio Level 2, treat it as the key
        for (OrgEntity entity2Dot : orgData.stream().filter(e -> e.getCioLevel() == 2).collect(Collectors.toList())) {
            String key2Dot = entity2Dot.getOrgGroup() + " - " + entity2Dot.getExecutive();

            // Step 3: For Cio Level 3 under the same Org Group, treat them as sub-keys
            Map<String, List<String>> level3Map = new HashMap<>();
            for (OrgEntity entity3Dot : orgData.stream()
                    .filter(e -> e.getOrgGroup().equals(entity2Dot.getOrgGroup()) && e.getCioLevel() == 3)
                    .collect(Collectors.toList())) {
                String key3Dot = entity3Dot.getExecutive() + " - " + entity3Dot.getPoint();

                // Step 4: For Cio Level 4 under the same Org Group, add them to the list
                List<String> level4List = orgData.stream()
                    .filter(e -> e.getOrgGroup().equals(entity2Dot.getOrgGroup()) && e.getCioLevel() == 4)
                    .map(e -> e.getExecutive() + " - " + e.getPoint())
                    .collect(Collectors.toList());

                // Step 5: Add the Cio Level 4 list under the Cio Level 3 key
                level3Map.put(key3Dot, level4List);
            }

            // Step 6: Add the entire level 3 map under the Cio Level 2 key
            result.put(key2Dot, level3Map);
        }

        return result;
    }
