<div class="container mt-5">
  <h2 class="mb-4">FAQ - Video Configuration</h2>

  <!-- Video List Section -->
  <div class="mb-4">
    <ul class="list-group">
      <li *ngFor="let video of videoList" class="list-group-item d-flex justify-content-between align-items-center">
        {{ video.name }}
        <span class="badge bg-primary rounded-pill">Uploaded</span>
      </li>
    </ul>
  </div>

  <!-- Add New Video Button -->
  <div class="text-end">
    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#videoModal">
      Add New Video
    </button>
  </div>

  <!-- Modal -->
  <div class="modal fade" id="videoModal" tabindex="-1" aria-labelledby="videoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">

        <form [formGroup]="videoForm" (ngSubmit)="uploadVideo()" novalidate>

          <div class="modal-header">
            <h5 class="modal-title" id="videoModalLabel">Upload New Video</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>

          <div class="modal-body">
            <!-- Video Name -->
            <div class="mb-3">
              <label class="form-label">Video Name</label>
              <input type="text" class="form-control" formControlName="videoName" required>
              <div class="text-danger" *ngIf="videoForm.get('videoName')?.invalid && videoForm.get('videoName')?.touched">
                Video name is required.
              </div>
            </div>

            <!-- Video File Input -->
            <div class="mb-3">
              <label class="form-label">Select Video File</label>
              <input type="file" class="form-control" (change)="onFileChange($event)">
              <div class="text-danger" *ngIf="fileError">
                {{ fileError }}
              </div>
            </div>

            <!-- Progress Bar -->
            <div *ngIf="uploadProgress > 0" class="progress mt-3">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   [style.width.%]="uploadProgress">
                {{ uploadProgress }}%
              </div>
            </div>
          </div>

          <div class="modal-footer">
            <button type="submit" class="btn btn-primary" [disabled]="videoForm.invalid || !selectedFile || isUploading">
              Upload Video
            </button>
          </div>

        </form>

      </div>
    </div>
  </div>
</div>







import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  videoForm: FormGroup;
  videoList: { name: string }[] = [];
  selectedFile: File | null = null;
  fileError: string = '';
  uploadProgress: number = 0;
  isUploading = false;

  constructor(private fb: FormBuilder) {
    this.videoForm = this.fb.group({
      videoName: ['', Validators.required]
    });
  }

  onFileChange(event: any) {
    const file = event.target.files[0];
    this.fileError = '';
    this.selectedFile = null;

    if (file) {
      const fileSizeMB = file.size / (1024 * 1024);
      if (fileSizeMB > 50) {
        this.fileError = 'File size should not exceed 50 MB';
      } else {
        this.selectedFile = file;
      }
    }
  }

  uploadVideo() {
    if (!this.selectedFile || this.videoForm.invalid) return;

    this.isUploading = true;
    this.uploadProgress = 0;

    // Simulate upload progress
    const interval = setInterval(() => {
      this.uploadProgress += 10;
      if (this.uploadProgress >= 100) {
        clearInterval(interval);
        this.isUploading = false;
        this.videoList.push({ name: this.videoForm.value.videoName });

        // Reset form and modal
        this.videoForm.reset();
        this.selectedFile = null;
        this.uploadProgress = 0;

        const modal = document.getElementById('videoModal');
        const bsModal = bootstrap.Modal.getInstance(modal!);
        bsModal?.hide();
      }
    }, 200);
  }
}






<div class="tw-space-y-4">
  <input type="file" accept="video/*" (change)="onFileSelected($event)" required />

  <div *ngIf="thumbnail">
    <p class="tw-font-semibold">Video Preview Thumbnail:</p>
    <img [src]="thumbnail" alt="Video Thumbnail" class="tw-rounded tw-shadow-md tw-w-64" />
  </div>

  <button class="tw-bg-blue-600 tw-text-white tw-px-4 tw-py-2 tw-rounded" (click)="upload()" [disabled]="!videoFile || !thumbnailBlob">
    Upload Video & Thumbnail
  </button>

  <!-- Hidden video and canvas for capture -->
  <video #videoElement hidden></video>
  <canvas #canvasElement hidden></canvas>
</div>






import { Component, ElementRef, ViewChild } from '@angular/core';

@Component({
  selector: 'app-video-upload',
  templateUrl: './video-upload.component.html'
})
export class VideoUploadComponent {
  @ViewChild('videoElement') videoElementRef!: ElementRef<HTMLVideoElement>;
  @ViewChild('canvasElement') canvasElementRef!: ElementRef<HTMLCanvasElement>;

  videoFile!: File;
  thumbnail!: string; // Base64 to preview
  thumbnailBlob!: Blob; // For upload

  onFileSelected(event: Event) {
    const input = event.target as HTMLInputElement;
    if (!input.files?.length) return;

    this.videoFile = input.files[0];
    const videoUrl = URL.createObjectURL(this.videoFile);

    const video = this.videoElementRef.nativeElement;
    video.src = videoUrl;
    video.load();

    video.onloadedmetadata = () => {
      // Seek to 1 second
      video.currentTime = 1;
    };

    video.onseeked = () => {
      const canvas = this.canvasElementRef.nativeElement;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        canvas.toBlob((blob) => {
          if (blob) {
            this.thumbnailBlob = blob;
            this.thumbnail = URL.createObjectURL(blob);
          }
        }, 'image/jpeg');
      }
    };
  }

  upload() {
    const formData = new FormData();
    formData.append('video', this.videoFile);
    formData.append('thumbnail', this.thumbnailBlob);

    // Call your backend API here
    // this.http.post('/api/videos/upload', formData).subscribe(...)
    console.log("Ready to upload", formData);
  }
}
