import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class SharePointMasking {

    // SharePoint Configuration
    private static final String SHAREPOINT_SITE_URL = "https://yourcompany.sharepoint.com/sites/your-site-name";
    private static final String SHAREPOINT_FILE_PATH = "/sites/your-site-name/Shared Documents/input_file.xlsx";
    private static final String OUTPUT_FILE_NAME = "masked_file.xlsx";
    private static final String USERNAME = "your_email@example.com";
    private static final String PASSWORD = "your_password";

    // Authentication
    private static String accessToken;

    public static void main(String[] args) {
        try {
            // Authenticate with SharePoint
            if (authenticateSharePoint()) {
                System.out.println("Authentication successful!");

                // Download file from SharePoint
                byte[] fileData = downloadFileFromSharePoint(SHAREPOINT_FILE_PATH);

                // Mask the data
                InputStream inputStream = new ByteArrayInputStream(fileData);
                ByteArrayOutputStream outputStream = maskExcelData(inputStream);

                // Upload masked file back to SharePoint
                uploadFileToSharePoint(OUTPUT_FILE_NAME, outputStream.toByteArray());
                System.out.println("Masked file uploaded successfully!");
            } else {
                System.out.println("Authentication failed.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Authenticate with SharePoint and retrieve the access token.
     */
    private static boolean authenticateSharePoint() {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            // Authentication URL for SharePoint Online
            String authUrl = "https://accounts.accesscontrol.windows.net/common/oauth2/token";

            // Create HTTP POST request for authentication
            HttpPost post = new HttpPost(authUrl);
            post.addHeader("Content-Type", "application/x-www-form-urlencoded");

            // Request body
            String requestBody = "grant_type=password&resource=" + SHAREPOINT_SITE_URL
                    + "&client_id=" + USERNAME + "&username=" + USERNAME + "&password=" + PASSWORD;
            post.setEntity(MultipartEntityBuilder.create().addTextBody("body", requestBody, ContentType.TEXT_PLAIN).build());

            // Execute the request
            try (CloseableHttpResponse response = client.execute(post)) {
                String responseBody = EntityUtils.toString(response.getEntity());
                if (response.getCode() == 200) {
                    // Extract the access token from the response
                    accessToken = extractAccessToken(responseBody);
                    return true;
                } else {
                    System.out.println("Failed to authenticate. Response: " + responseBody);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Extracts the access token from the authentication response.
     */
    private static String extractAccessToken(String responseBody) {
        // Implement JSON parsing logic to extract the "access_token" value
        // For simplicity, replace this with your preferred JSON parsing library
        return "extracted_access_token";  // Replace with actual implementation
    }

    /**
     * Download a file from SharePoint.
     */
    private static byte[] downloadFileFromSharePoint(String filePath) throws IOException {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            String downloadUrl = SHAREPOINT_SITE_URL + "/_api/web/getfilebyserverrelativeurl('" + filePath + "')/$value";

            // Create GET request
            HttpGet get = new HttpGet(downloadUrl);
            get.addHeader("Authorization", "Bearer " + accessToken);

            // Execute the request
            try (CloseableHttpResponse response = client.execute(get)) {
                if (response.getCode() == 200) {
                    return response.getEntity().getContent().readAllBytes();
                } else {
                    throw new IOException("Failed to download file. Response code: " + response.getCode());
                }
            }
        }
    }

    /**
     * Mask Excel data in-memory.
     */
    private static ByteArrayOutputStream maskExcelData(InputStream inputStream) throws IOException {
        // Load the workbook
        Workbook workbook = new XSSFWorkbook(inputStream);
        Sheet sheet = workbook.getSheetAt(0);  // Get the first sheet

        // Define the masking rules
        Map<String, MaskingRule> maskingRules = new HashMap<>();
        maskingRules.put("Name", value -> "Masked-" + value);
        maskingRules.put("Email", value -> "masked@example.com");
        maskingRules.put("Phone", value -> value.replaceAll("\\d(?=\\d{4})", "*"));

        // Get header row
        Row headerRow = sheet.getRow(1);  // Assuming headers are in the second row
        Map<String, Integer> columnIndices = new HashMap<>();
        for (Cell cell : headerRow) {
            columnIndices.put(cell.getStringCellValue(), cell.getColumnIndex());
        }

        // Mask data
        for (Row row : sheet) {
            if (row.getRowNum() <= 1) continue;  // Skip header row
            for (Map.Entry<String, MaskingRule> entry : maskingRules.entrySet()) {
                String columnName = entry.getKey();
                MaskingRule rule = entry.getValue();
                if (columnIndices.containsKey(columnName)) {
                    Cell cell = row.getCell(columnIndices.get(columnName));
                    if (cell != null && cell.getCellType() == CellType.STRING) {
                        cell.setCellValue(rule.apply(cell.getStringCellValue()));
                    }
                }
            }
        }

        // Save the workbook to an output stream
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        workbook.write(outputStream);
        workbook.close();
        return outputStream;
    }

    /**
     * Upload a file to SharePoint.
     */
    private static void uploadFileToSharePoint(String fileName, byte[] fileContent) throws IOException {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            String uploadUrl = SHAREPOINT_SITE_URL + "/_api/web/getfolderbyserverrelativeurl('Shared Documents')/files/add(overwrite=true, url='" + fileName + "')";

            // Create POST request
            HttpPost post = new HttpPost(uploadUrl);
            post.addHeader("Authorization", "Bearer " + accessToken);
            post.setEntity(MultipartEntityBuilder.create()
                    .addBinaryBody("file", fileContent, ContentType.APPLICATION_OCTET_STREAM, fileName)
                    .build());

            // Execute the request
            try (CloseableHttpResponse response = client.execute(post)) {
                if (response.getCode() != 200) {
                    throw new IOException("Failed to upload file. Response code: " + response.getCode());
                }
            }
        }
    }

    /**
     * Functional interface for masking rules.
     */
    @FunctionalInterface
    interface MaskingRule {
        String apply(String value);
    }
}





package com.example.excelmasking.controller;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/masking")
public class MaskingController {

    // Endpoint to read, mask, and save the Excel file
    @PostMapping("/mask")
    public ResponseEntity<String> maskExcelFile(@RequestParam String inputFilePath,
                                                @RequestParam String outputFilePath) {
        try {
            // Load the input Excel file
            FileInputStream inputStream = new FileInputStream(inputFilePath);
            Workbook workbook = new XSSFWorkbook(inputStream);

            // Get the first sheet
            Sheet sheet = workbook.getSheetAt(0);

            // Define masking rules
            Map<String, MaskingRule> maskingRules = new HashMap<>();
            maskingRules.put("Name", value -> "Masked-" + value); // Prefix "Masked-" to the name
            maskingRules.put("Email", value -> "masked@example.com"); // Replace email with a constant
            maskingRules.put("Phone", value -> value.replaceAll("\\d(?=\\d{4})", "*")); // Mask phone numbers

            // Mask the data
            maskSheetData(sheet, maskingRules);

            // Save the masked file to the output path
            FileOutputStream outputStream = new FileOutputStream(outputFilePath);
            workbook.write(outputStream);
            workbook.close();
            inputStream.close();
            outputStream.close();

            return ResponseEntity.ok("File masked successfully and saved to: " + outputFilePath);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("Error processing file: " + e.getMessage());
        }
    }

    /**
     * Apply masking rules to the Excel sheet.
     */
    private void maskSheetData(Sheet sheet, Map<String, MaskingRule> maskingRules) {
        // Assuming headers are in the first row (row 0)
        Row headerRow = sheet.getRow(0);
        if (headerRow == null) {
            throw new IllegalArgumentException("Header row is missing in the Excel file.");
        }

        // Map column names to their indices
        Map<String, Integer> columnIndices = new HashMap<>();
        for (Cell cell : headerRow) {
            columnIndices.put(cell.getStringCellValue(), cell.getColumnIndex());
        }

        // Iterate through rows and apply masking rules
        for (Row row : sheet) {
            if (row.getRowNum() == 0) continue; // Skip the header row
            for (Map.Entry<String, MaskingRule> entry : maskingRules.entrySet()) {
                String columnName = entry.getKey();
                MaskingRule rule = entry.getValue();
                if (columnIndices.containsKey(columnName)) {
                    Cell cell = row.getCell(columnIndices.get(columnName));
                    if (cell != null && cell.getCellType() == CellType.STRING) {
                        String originalValue = cell.getStringCellValue();
                        cell.setCellValue(rule.apply(originalValue)); // Apply the masking rule
                    }
                }
            }
        }
    }

    /**
     * Functional interface for masking rules.
     */
    @FunctionalInterface
    interface MaskingRule {
        String apply(String value);
    }
}






package com.example.excelmasking.controller;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/masking")
public class MaskingController {

    /**
     * Endpoint to upload, mask, and download an Excel file using SXSSFWorkbook.
     */
    @PostMapping("/mask")
    public ResponseEntity<byte[]> maskExcelFile(@RequestParam("file") MultipartFile file) {
        try {
            // Load the uploaded Excel file
            XSSFWorkbook originalWorkbook = new XSSFWorkbook(file.getInputStream());
            Sheet originalSheet = originalWorkbook.getSheetAt(0);

            // Create a streaming workbook for output
            SXSSFWorkbook streamingWorkbook = new SXSSFWorkbook();
            Sheet streamingSheet = streamingWorkbook.createSheet("Masked Data");

            // Define masking rules
            Map<String, MaskingRule> maskingRules = new HashMap<>();
            maskingRules.put("Name", value -> "Masked-" + value); // Prefix "Masked-" to the name
            maskingRules.put("Email", value -> "masked@example.com"); // Replace email with a constant
            maskingRules.put("Phone", value -> value.replaceAll("\\d(?=\\d{4})", "*")); // Mask phone numbers

            // Process and mask data
            maskSheetData(originalSheet, streamingSheet, maskingRules);

            // Write the masked file to a byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            streamingWorkbook.write(outputStream);
            streamingWorkbook.dispose(); // Dispose of temporary files to save memory
            originalWorkbook.close();

            // Return the response with the masked file
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=masked_file.xlsx")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(outputStream.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(null);
        }
    }

    /**
     * Applies masking rules and writes data into a streaming workbook.
     */
    private void maskSheetData(Sheet originalSheet, Sheet streamingSheet, Map<String, MaskingRule> maskingRules) {
        // Assuming headers are in the second row (row index 1)
        Row originalHeaderRow = originalSheet.getRow(1);
        if (originalHeaderRow == null) {
            throw new IllegalArgumentException("Header row is missing in the Excel file.");
        }

        // Map column names to their indices
        Map<String, Integer> columnIndices = new HashMap<>();
        Row streamingHeaderRow = streamingSheet.createRow(0); // Create header row in the streaming sheet
        for (Cell cell : originalHeaderRow) {
            int colIndex = cell.getColumnIndex();
            String header = cell.getStringCellValue();
            columnIndices.put(header, colIndex);

            // Copy headers to the streaming workbook
            Cell streamingCell = streamingHeaderRow.createCell(colIndex);
            streamingCell.setCellValue(header);
        }

        // Process and mask data rows
        for (int rowIndex = 2; rowIndex <= originalSheet.getLastRowNum(); rowIndex++) {
            Row originalRow = originalSheet.getRow(rowIndex);
            if (originalRow == null) continue;

            Row streamingRow = streamingSheet.createRow(rowIndex - 1); // Create row in streaming sheet
            for (Map.Entry<String, MaskingRule> entry : maskingRules.entrySet()) {
                String columnName = entry.getKey();
                MaskingRule rule = entry.getValue();
                if (columnIndices.containsKey(columnName)) {
                    int colIndex = columnIndices.get(columnName);
                    Cell originalCell = originalRow.getCell(colIndex);
                    Cell streamingCell = streamingRow.createCell(colIndex);

                    // Copy and mask data
                    if (originalCell != null && originalCell.getCellType() == CellType.STRING) {
                        String originalValue = originalCell.getStringCellValue();
                        streamingCell.setCellValue(rule.apply(originalValue));
                    } else if (originalCell != null) {
                        copyCellValue(originalCell, streamingCell); // Copy non-string values as-is
                    }
                }
            }
        }
    }

    /**
     * Copies the value of a cell to another cell.
     */
    private void copyCellValue(Cell sourceCell, Cell targetCell) {
        switch (sourceCell.getCellType()) {
            case STRING:
                targetCell.setCellValue(sourceCell.getStringCellValue());
                break;
            case NUMERIC:
                targetCell.setCellValue(sourceCell.getNumericCellValue());
                break;
            case BOOLEAN:
                targetCell.setCellValue(sourceCell.getBooleanCellValue());
                break;
            case FORMULA:
                targetCell.setCellFormula(sourceCell.getCellFormula());
                break;
            default:
                break;
        }
    }

    /**
     * Functional interface for masking rules.
     */
    @FunctionalInterface
    interface MaskingRule {
        String apply(String value);
    }
}



package com.example.excelmasking.controller;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/masking")
public class MaskingController {

    @PostMapping("/mask")
    public ResponseEntity<byte[]> maskExcelFile(@RequestParam("file") MultipartFile file) {
        try {
            // Load the original Excel file
            XSSFWorkbook originalWorkbook = new XSSFWorkbook(file.getInputStream());
            Sheet originalSheet = originalWorkbook.getSheetAt(0);
            String originalSheetName = originalWorkbook.getSheetName(0); // Get original sheet name

            // Create a streaming workbook for output
            SXSSFWorkbook streamingWorkbook = new SXSSFWorkbook();
            Sheet streamingSheet = streamingWorkbook.createSheet(originalSheetName); // Retain original sheet name

            // Define masking rules
            Map<String, MaskingRule> maskingRules = new HashMap<>();
            maskingRules.put("Name", value -> "Masked-" + value); // Prefix "Masked-" to the name
            maskingRules.put("Email", value -> "masked@example.com"); // Replace email with a constant
            maskingRules.put("Phone", value -> value.replaceAll("\\d(?=\\d{4})", "*")); // Mask phone numbers

            // Process and mask data with styles
            copyAndMaskSheet(originalSheet, streamingSheet, maskingRules);

            // Write the masked file to a byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            streamingWorkbook.write(outputStream);
            streamingWorkbook.dispose(); // Dispose temporary files
            originalWorkbook.close();

            // Return the response with the masked file
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=masked_file.xlsx")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(outputStream.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(null);
        }
    }

    private void copyAndMaskSheet(Sheet originalSheet, Sheet streamingSheet, Map<String, MaskingRule> maskingRules) {
        // Assuming headers are in the second row (row index 1)
        Row originalHeaderRow = originalSheet.getRow(1);
        if (originalHeaderRow == null) {
            throw new IllegalArgumentException("Header row is missing in the Excel file.");
        }

        // Map column names to their indices
        Map<String, Integer> columnIndices = new HashMap<>();
        Row streamingHeaderRow = streamingSheet.createRow(0); // Create header row in the streaming sheet
        for (Cell cell : originalHeaderRow) {
            int colIndex = cell.getColumnIndex();
            String header = cell.getStringCellValue();
            columnIndices.put(header, colIndex);

            // Copy headers to the streaming workbook
            Cell streamingCell = streamingHeaderRow.createCell(colIndex);
            copyCellStylesAndValue(cell, streamingCell);
        }

        // Process and mask data rows
        for (int rowIndex = 2; rowIndex <= originalSheet.getLastRowNum(); rowIndex++) {
            Row originalRow = originalSheet.getRow(rowIndex);
            if (originalRow == null) continue;

            Row streamingRow = streamingSheet.createRow(rowIndex - 1); // Create row in streaming sheet
            for (Cell originalCell : originalRow) {
                if (originalCell == null) continue;

                Cell streamingCell = streamingRow.createCell(originalCell.getColumnIndex());
                copyCellStylesAndValue(originalCell, streamingCell);

                // Apply masking logic if needed
                for (Map.Entry<String, MaskingRule> entry : maskingRules.entrySet()) {
                    String columnName = entry.getKey();
                    MaskingRule rule = entry.getValue();
                    if (columnIndices.containsKey(columnName) &&
                            columnIndices.get(columnName).equals(originalCell.getColumnIndex())) {
                        if (originalCell.getCellType() == CellType.STRING) {
                            String originalValue = originalCell.getStringCellValue();
                            streamingCell.setCellValue(rule.apply(originalValue));
                        }
                    }
                }
            }
        }
    }

    private void copyCellStylesAndValue(Cell sourceCell, Cell targetCell) {
        Workbook workbook = targetCell.getSheet().getWorkbook();

        // Copy styles
        CellStyle newCellStyle = workbook.createCellStyle();
        newCellStyle.cloneStyleFrom(sourceCell.getCellStyle());
        targetCell.setCellStyle(newCellStyle);

        // Copy value based on the cell type
        switch (sourceCell.getCellType()) {
            case STRING:
                targetCell.setCellValue(sourceCell.getStringCellValue());
                break;
            case NUMERIC:
                targetCell.setCellValue(sourceCell.getNumericCellValue());
                break;
            case BOOLEAN:
                targetCell.setCellValue(sourceCell.getBooleanCellValue());
                break;
            case FORMULA:
                targetCell.setCellFormula(sourceCell.getCellFormula());
                break;
            default:
                break;
        }
    }

    @FunctionalInterface
    interface MaskingRule {
        String apply(String value);
    }
}

