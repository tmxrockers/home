import pandas as pd

def mask_excel_data(input_file, output_file, columns_to_mask, header_row):
    # Load the entire Excel file with no headers to preserve the structure
    full_df = pd.read_excel(input_file, header=None)

    # Extract the actual data starting from the header row
    data_df = pd.read_excel(input_file, header=header_row)

    # Mask the specified columns
    for column in columns_to_mask:
        if column in data_df.columns:
            # Replace data with asterisks if the cell is not empty
            data_df[column] = data_df[column].apply(
                lambda x: '*' * len(str(x)) if pd.notna(x) and str(x).strip() else x
            )
        else:
            print(f"Column '{column}' not found in the Excel file.")

    # Replace the data in the original structure
    full_df.iloc[header_row + 1:, :] = data_df.values

    # Save the modified data to a new Excel file
    full_df.to_excel(output_file, index=False, header=False)
    print(f"Masked data saved to {output_file}")

# Input file name
input_file = "input_data.xlsx"

# Output file name
output_file = "masked_data.xlsx"

# Columns to mask
columns_to_mask = ["Name", "Email", "Phone"]  # Replace with the columns you want to mask

# Header row (0-indexed, e.g., 1 means second row)
header_row = 1

# Call the function
mask_excel_data(input_file, output_file, columns_to_mask, header_row)







import openpyxl

def mask_excel_data_with_style(input_file, output_file, columns_to_mask, header_row):
    # Load the workbook
    wb = openpyxl.load_workbook(input_file)
    sheet = wb.active  # Use the first sheet by default; adjust if needed

    # Get column indices for columns to mask
    headers = [cell.value for cell in sheet[header_row + 1]]  # Header row is 1-indexed
    column_indices_to_mask = [headers.index(col) + 1 for col in columns_to_mask if col in headers]

    if not column_indices_to_mask:
        print("No matching columns found to mask.")
        return

    # Mask data while preserving formatting
    for row in sheet.iter_rows(min_row=header_row + 2):  # Data starts after the header row
        for col_idx in column_indices_to_mask:
            cell = row[col_idx - 1]  # openpyxl uses 0-based indexing internally
            if cell.value and isinstance(cell.value, str):  # Mask only non-empty string cells
                cell.value = '*' * len(cell.value)

    # Save the masked workbook
    wb.save(output_file)
    print(f"Masked data saved to {output_file}")

# Input file name
input_file = "input_data.xlsx"

# Output file name
output_file = "masked_data.xlsx"

# Columns to mask
columns_to_mask = ["Name", "Email", "Phone"]  # Replace with the columns you want to mask

# Header row (0-indexed; 1 means the second row)
header_row = 1

# Call the function
mask_excel_data_with_style(input_file, output_file, columns_to_mask, header_row)






import openpyxl

def mask_excel_data_with_patterns(input_file, output_file, header_row, masking_rules):
    """
    Masks Excel data based on given masking rules and preserves formatting.

    :param input_file: Path to the input Excel file.
    :param output_file: Path to save the masked Excel file.
    :param header_row: The row (1-indexed) where headers are located.
    :param masking_rules: A dictionary where keys are column names and values are masking functions or constants.
    """
    # Load the workbook
    wb = openpyxl.load_workbook(input_file)
    sheet = wb.active  # Use the first sheet by default; adjust if needed

    # Get column indices based on the header row
    headers = [cell.value for cell in sheet[header_row]]
    column_indices = {col: idx + 1 for idx, col in enumerate(headers)}

    # Apply masking based on the rules
    for row in sheet.iter_rows(min_row=header_row + 1):  # Data rows start after the header
        for column_name, mask_rule in masking_rules.items():
            col_idx = column_indices.get(column_name)
            if col_idx:
                cell = row[col_idx - 1]  # openpyxl uses 0-based indexing internally
                if cell.value:
                    if callable(mask_rule):
                        cell.value = mask_rule(cell.value)
                    else:
                        cell.value = mask_rule  # Replace with a constant value

    # Save the masked workbook
    wb.save(output_file)
    print(f"Masked data saved to {output_file}")

# Define the input and output file names
input_file = "input_data.xlsx"
output_file = "masked_data.xlsx"

# Define the header row (1-indexed)
header_row = 2  # Example: Header is in the second row

# Define the masking rules
masking_rules = {
    "Name": lambda x: f"PR-{x}",  # Add prefix "PR-" to the Name column
    "Email": "masked_email@example.com",  # Replace all Email column values with a constant
    "Phone": lambda x: f"****{x[-4:]}" if len(str(x)) >= 4 else "****",  # Mask Phone column except the last 4 digits
}

# Call the function
mask_excel_data_with_patterns(input_file, output_file, header_row, masking_rules)





import openpyxl

def mask_excel_data_with_patterns(input_file, output_file, header_row, masking_rules):
    """
    Masks Excel data based on given masking rules and preserves formatting.

    :param input_file: Path to the input Excel file.
    :param output_file: Path to save the masked Excel file.
    :param header_row: The row (1-indexed) where headers are located.
    :param masking_rules: A dictionary where keys are column names and values are masking functions or constants.
    """
    # Load the workbook
    wb = openpyxl.load_workbook(input_file)
    sheet = wb.active  # Use the first sheet by default

    # Get headers and column mapping
    headers = [cell.value for cell in sheet[header_row]]
    column_indices = {col: idx + 1 for idx, col in enumerate(headers)}

    # Validate if all specified columns exist in the file
    missing_columns = [col for col in masking_rules if col not in column_indices]
    if missing_columns:
        print(f"Error: The following columns were not found in the Excel file: {missing_columns}")
        return

    # Apply masking rules to each row
    for row in sheet.iter_rows(min_row=header_row + 1):  # Start masking from the data rows
        for column_name, mask_rule in masking_rules.items():
            col_idx = column_indices[column_name]
            cell = row[col_idx - 1]  # Get the cell (openpyxl uses 0-based indexing)
            if cell.value:  # Only mask non-empty cells
                if callable(mask_rule):  # If the rule is a function, apply it
                    cell.value = mask_rule(cell.value)
                else:  # If the rule is a constant, replace the value
                    cell.value = mask_rule

    # Save the masked workbook
    wb.save(output_file)
    print(f"Masked data saved successfully to {output_file}")

# Input and output file names
input_file = "input_data.xlsx"
output_file = "masked_data.xlsx"

# Define the header row (1-indexed)
header_row = 2  # Example: The second row contains headers

# Define masking rules
masking_rules = {
    "Name": lambda x: f"PR-{x}",  # Add prefix "PR-" to the Name column
    "Email": "masked_email@example.com",  # Replace all Email column values with a constant
    "Phone": lambda x: f"****{x[-4:]}" if isinstance(x, str) and len(x) >= 4 else "****",  # Mask Phone column, show last 4 digits
}

# Call the function
mask_excel_data_with_patterns(input_file, output_file, header_row, masking_rules)





import openpyxl
import os

def mask_excel_data_with_workflow(input_file, output_file, header_row, workflow_type):
    """
    Masks Excel data dynamically based on the workflow type and preserves formatting.

    :param input_file: Path to the input Excel file.
    :param output_file: Path to save the masked Excel file.
    :param header_row: The row (1-indexed) where headers are located.
    :param workflow_type: The workflow type to determine masking rules.
    """
    # Define masking configurations for workflows
    workflow_rules = {
        "workflow_a": {
            "Name": lambda x: f"WF-A-{x}",  # Prefix "WF-A-"
            "Email": "masked_workflow_a@example.com",  # Replace with constant
            "Phone": lambda x: f"****{x[-4:]}" if isinstance(x, str) and len(x) >= 4 else "****",
        },
        "workflow_b": {
            "Name": lambda x: f"WF-B-{x}",
            "Address": "Confidential",  # Replace address with "Confidential"
        },
        "default": {
            "Name": lambda x: f"Masked-{x}",
            "Email": "masked_default@example.com",
        },
    }

    # Determine the masking rules based on the workflow type
    masking_rules = workflow_rules.get(workflow_type, workflow_rules["default"])

    # Load the workbook
    wb = openpyxl.load_workbook(input_file)
    sheet = wb.active

    # Get headers and column mapping
    headers = [cell.value for cell in sheet[header_row]]
    column_indices = {col: idx + 1 for idx, col in enumerate(headers)}

    # Validate if all specified columns exist in the file
    missing_columns = [col for col in masking_rules if col not in column_indices]
    if missing_columns:
        print(f"Warning: The following columns were not found in the Excel file: {missing_columns}")

    # Apply masking rules to each row
    for row in sheet.iter_rows(min_row=header_row + 1):  # Start masking from the data rows
        for column_name, mask_rule in masking_rules.items():
            col_idx = column_indices.get(column_name)
            if col_idx:
                cell = row[col_idx - 1]  # Get the cell
                if cell.value:  # Only mask non-empty cells
                    if callable(mask_rule):  # If the rule is a function, apply it
                        cell.value = mask_rule(cell.value)
                    else:  # If the rule is a constant, replace the value
                        cell.value = mask_rule

    # Save the masked workbook
    wb.save(output_file)
    print(f"Masked data saved successfully to {output_file}")

# Input and output file names
input_file = "input_data.xlsx"
output_file = "masked_data.xlsx"

# Define the header row (1-indexed)
header_row = 2  # Example: The second row contains headers

# Define the workflow type based on file name or external input
file_name = os.path.basename(input_file)  # Extract file name
workflow_type = "workflow_a" if "data_a" in file_name else "workflow_b"  # Example condition

# Call the function
mask_excel_data_with_workflow(input_file, output_file, header_row, workflow_type)




from office365.sharepoint.client_context import ClientContext
from office365.runtime.auth.user_credential import UserCredential
import openpyxl
import io

# SharePoint Configuration
SHAREPOINT_SITE_URL = "https://yourcompany.sharepoint.com/sites/your-site-name"
SHAREPOINT_DOC_LIBRARY = "Shared Documents"  # Document library name
SHAREPOINT_FILE_PATH = "path/to/your/input_file.xlsx"  # File path in SharePoint
OUTPUT_FILE_PATH = "path/to/your/output_file.xlsx"  # Path to upload the masked file
USERNAME = "your_email@example.com"
PASSWORD = "your_password"

# Connect to SharePoint
ctx = ClientContext(SHAREPOINT_SITE_URL).with_credentials(UserCredential(USERNAME, PASSWORD))

def download_file_from_sharepoint(file_path):
    """
    Downloads a file from SharePoint and returns it as an in-memory binary stream.
    """
    file = ctx.web.get_file_by_server_relative_url(file_path).download().execute_query()
    print(f"Downloaded: {file_path}")
    return io.BytesIO(file.content)

def upload_file_to_sharepoint(file_path, file_content):
    """
    Uploads a file to SharePoint from an in-memory binary stream.
    """
    target_folder = ctx.web.get_folder_by_server_relative_url(SHAREPOINT_DOC_LIBRARY)
    target_folder.upload_file(file_path, file_content).execute_query()
    print(f"Uploaded: {file_path}")

def mask_excel_data(input_stream, header_row, masking_rules):
    """
    Masks Excel data in-memory based on masking rules and returns a binary stream of the masked file.
    """
    # Load the workbook
    wb = openpyxl.load_workbook(input_stream)
    sheet = wb.active

    # Get headers and column mapping
    headers = [cell.value for cell in sheet[header_row]]
    column_indices = {col: idx + 1 for idx, col in enumerate(headers)}

    # Apply masking rules
    for row in sheet.iter_rows(min_row=header_row + 1):  # Start masking from the data rows
        for column_name, mask_rule in masking_rules.items():
            col_idx = column_indices.get(column_name)
            if col_idx:
                cell = row[col_idx - 1]
                if cell.value:  # Only mask non-empty cells
                    if callable(mask_rule):  # If the rule is a function, apply it
                        cell.value = mask_rule(cell.value)
                    else:  # If the rule is a constant, replace the value
                        cell.value = mask_rule

    # Save the workbook to an in-memory stream
    output_stream = io.BytesIO()
    wb.save(output_stream)
    output_stream.seek(0)
    return output_stream

# Define the masking rules
header_row = 2  # Example: Headers are in the second row
masking_rules = {
    "Name": lambda x: f"Masked-{x}",  # Prefix with "Masked-"
    "Email": "masked@example.com",  # Replace with a constant
    "Phone": lambda x: f"****{x[-4:]}" if isinstance(x, str) and len(x) >= 4 else "****",
}

# Workflow
# Step 1: Download the file from SharePoint
input_file_stream = download_file_from_sharepoint(SHAREPOINT_FILE_PATH)

# Step 2: Apply masking
masked_file_stream = mask_excel_data(input_file_stream, header_row, masking_rules)

# Step 3: Upload the masked file back to SharePoint
upload_file_to_sharepoint(OUTPUT_FILE_PATH, masked_file_stream.getvalue())





from office365.sharepoint.client_context import ClientContext
from office365.runtime.auth.user_credential import UserCredential

# SharePoint Configuration
SHAREPOINT_SITE_URL = "https://yourcompany.sharepoint.com/sites/your-site-name"
USERNAME = "your_email@example.com"
PASSWORD = "your_password"

def authenticate_sharepoint(site_url, username, password):
    """
    Authenticates to SharePoint and verifies the connection.
    
    :param site_url: The SharePoint site URL.
    :param username: SharePoint account username.
    :param password: SharePoint account password.
    :return: True if authentication is successful, otherwise False.
    """
    try:
        # Create the ClientContext with credentials
        ctx = ClientContext(site_url).with_credentials(UserCredential(username, password))

        # Try accessing the web title to verify authentication
        web = ctx.web
        ctx.load(web)
        ctx.execute_query()  # Execute the query to verify connection

        print(f"Successfully connected to SharePoint site: {web.properties['Title']}")
        return True
    except Exception as e:
        print(f"Failed to authenticate to SharePoint. Error: {e}")
        return False

# Call the authentication function
if authenticate_sharepoint(SHAREPOINT_SITE_URL, USERNAME, PASSWORD):
    print("Authentication successful.")
else:
    print("Authentication failed.")
