package com.example.service;

import com.example.model.TdReportUsageTracking;
import com.example.repository.TdReportUsageRepository;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.temporal.TemporalAdjusters;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class TdReportUsageService {

    private final TdReportUsageRepository repository;

    public TdReportUsageService(TdReportUsageRepository repository) {
        this.repository = repository;
    }

    public Map<String, List<Map<String, Object>>> getUsageSummaryByUser(String userId) {
        List<TdReportUsageTracking> allData = repository.findByUserId(userId);

        // Get date ranges
        LocalDate today = LocalDate.now();
        LocalDate firstDayOfCurrentMonth = today.with(TemporalAdjusters.firstDayOfMonth());
        LocalDate firstDayOfLastMonth = firstDayOfCurrentMonth.minusMonths(1);
        LocalDate firstDayOfThreeMonthsAgo = firstDayOfCurrentMonth.minusMonths(3);

        // Convert dates to Timestamp for filtering
        Timestamp currentMonthStart = Timestamp.valueOf(firstDayOfCurrentMonth.atStartOfDay());
        Timestamp lastMonthStart = Timestamp.valueOf(firstDayOfLastMonth.atStartOfDay());
        Timestamp threeMonthsAgoStart = Timestamp.valueOf(firstDayOfThreeMonthsAgo.atStartOfDay());

        // Filtering data based on date conditions
        List<TdReportUsageTracking> lastMonthData = allData.stream()
                .filter(r -> r.getLastAccessedAt().after(lastMonthStart) &&
                             r.getLastAccessedAt().before(currentMonthStart))
                .collect(Collectors.toList());

        List<TdReportUsageTracking> currentMonthData = allData.stream()
                .filter(r -> r.getLastAccessedAt().after(currentMonthStart))
                .collect(Collectors.toList());

        List<TdReportUsageTracking> lastThreeMonthsData = allData.stream()
                .filter(r -> r.getLastAccessedAt().after(threeMonthsAgoStart))
                .collect(Collectors.toList());

        List<TdReportUsageTracking> overallData = allData; // No filtering for overall

        // Convert data into grouped usage count
        return Map.of(
                "overall", groupUsage(overallData),
                "lastMonth", groupUsage(lastMonthData),
                "lastThreeMonths", groupUsage(lastThreeMonthsData),
                "currentMonth", groupUsage(currentMonthData)
        );
    }

    private List<Map<String, Object>> groupUsage(List<TdReportUsageTracking> data) {
        return data.stream()
                .collect(Collectors.groupingBy(
                        r -> r.getReportId(),
                        Collectors.counting()
                ))
                .entrySet().stream()
                .map(entry -> Map.of(
                        "reportId", entry.getKey(),
                        "accessCount", entry.getValue()
                ))
                .collect(Collectors.toList());
    }
}
